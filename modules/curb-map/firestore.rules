rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {

        function isAuthenticated()             { return request.auth != null; }
        function getAuthenticatedUserId()      { return request.auth.token.userId; }
        function getUserDoc()                  { return get(   /databases/$(database)/documents/users/$(getAuthenticatedUserId())); }
        function userExists()                  { return exists(/databases/$(database)/documents/users/$(getAuthenticatedUserId())); }
        function isOwnUserDoc(userId)          { return isAuthenticated() && getAuthenticatedUserId() == userId; }

        function isMemberOfOrganization(orgId) {
            return isAuthenticated()
            && userExists()
            && getUserDoc().data.organizations[orgId] != null;
        }

        // -------------------------------------------------------------------------------------------------------------
        // Rules
        // -------------------------------------------------------------------------------------------------------------

        // Completed Actions collection (immutable audit trail)
        match /{path=**}/completedActions/{id} { allow read: if isMemberOfOrganization(resource.data.organizationId); }
        match /{path=**}/organizations/{orgId} { allow read: if isMemberOfOrganization(orgId); }
        match /{path=**}/projects/{projectId}  { allow read: if isMemberOfOrganization(resource.data.organizationId); }
        match /{path=**}/users/{userId}        { allow read: if isOwnUserDoc(userId); }

        // Default: Deny all other collections
        match /{document=**} {
            allow read, write: if false;
        }
    }
}
