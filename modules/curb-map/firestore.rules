rules_version = '2';

service cloud.firestore {
    match /databases/{database}/documents {
        function isValidActionRequestId(id)    { return id is string && id.matches('^acr_[a-z0-9]{12,}$');                 }
        function isValidCorrelationId(id)      { return id is string && id.matches('^cor_[a-z0-9]{12,}$');                 }
        function isValidIdempotencyKey(id)     { return id is string && id.matches('^idm_[a-z0-9]{12,}$');                 }
        function isValidOrganizationId(id)     { return id is string && id.matches('^org_[a-z0-9]{12,}$');                 }
        function isValidUserId(id)             { return id is string && id.matches('^usr_[a-z0-9]{12,}$');                 }
        function isValidSubjectId(id)          { return id is string && id.matches('^(usr|org|prj)_[a-z0-9]{12,}$');       }

        function isValidProjectId(id)          { return id == null || (id is string && id.matches('^prj_[a-z0-9]{12,}$')); }
        function isValidSchemaVersion(version) { return version is int && version == 1;                                    }
        function isValidSubjectType(type)      { return type   is string && type   in ['user', 'organization', 'project']; }

        function isAuthenticated()             { return request.auth != null; }
        function getAuthenticatedUserId()      { return request.auth.token.userId; }
        function getUserDoc()                  { return get(   /databases/$(database)/documents/users/$(getAuthenticatedUserId())); }
        function userExists()                  { return exists(/databases/$(database)/documents/users/$(getAuthenticatedUserId())); }
        function isOwnUserDoc(userId)          { return isAuthenticated() && getAuthenticatedUserId() == userId; }

        function isMemberOfOrganization(orgId) {
            return isAuthenticated()
            && userExists()
            && getUserDoc().data.organizations[orgId] != null;
        }

        function hasValidActionRequestFields(data) {
            return data.keys().hasAll([
                'id', 'action', 'actorId', 'subjectId', 'subjectType',
                'organizationId', 'idempotencyKey', 'correlationId',
                'schemaVersion', 'createdAt'
            ])
            && isValidActionRequestId(data.id)
            && data.action is map
            && data.action['@@tagName'] is string
            && isValidUserId(data.actorId)
            && isValidSubjectId(data.subjectId)
            && isValidSubjectType(data.subjectType)
            && isValidOrganizationId(data.organizationId)
            && isValidProjectId(data.projectId)
            && isValidIdempotencyKey(data.idempotencyKey)
            && isValidCorrelationId(data.correlationId)
            && isValidSchemaVersion(data.schemaVersion)
            && data.createdAt is timestamp;
        }

        // -------------------------------------------------------------------------------------------------------------
        // Rules
        // -------------------------------------------------------------------------------------------------------------

        // Completed Actions collection (immutable audit trail)
        match /{path=**}/completedActions/{id} { allow read: if isMemberOfOrganization(resource.data.organizationId); }
        match /{path=**}/organizations/{orgId} { allow read: if isMemberOfOrganization(orgId); }
        match /{path=**}/projects/{projectId}  { allow read: if isMemberOfOrganization(resource.data.organizationId); }
        match /{path=**}/users/{userId}        { allow read: if isOwnUserDoc(userId); }

        // Default: Deny all other collections
        match /{document=**} {
            allow read, write: if false;
        }
    }
}
