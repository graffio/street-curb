coding_standards:
  version: 1.0
  description: Functional JavaScript coding standards with strict anti-TypeScript stance
  severity_scale:
    must: "Non-negotiable; every contribution must comply."
    should: "Strongly recommended; explain deviations."
    avoid: "Prohibited unless an explicit exemption exists."

core_principles:
  functional_programming:
    severity: must
    test_ref: functional-programming-compliance
    summary: "Favor pure, composable functions and immutable data."
    forbidden_keywords: ["class", "new"]
    preferred_patterns: ["map", "reduce", "filter", "forEach"]
    immutability: required
    mutation_alternative: "assoc function"

  typescript_prohibition:
    severity: must
    test_ref: typescript-prohibition
    summary: "TypeScript syntax and tooling are banned; rely on runtime validation."
    file_extensions:
      allowed: [.js, .jsx]
      forbidden: [.ts, .tsx, .d.ts]
    syntax_forbidden: ["TypeScript annotations", "JSDoc types", "tsconfig.json"]
    validation_alternative: "Runtime validation"

  single_indentation_level:
    severity: must
    test_ref: single-indentation-level
    summary: "Limit each function to one indentation level; prefer helper extraction and early returns."
    max_nesting: 1
    indentation_contexts: ["try/catch", "object literals", "jsx elements", "function definitions"]
    enforcement: strict
    guidance:
      - "Each function definition resets indentation counting."
      - "Lift helper functions to the top of the current scope."
      - "Split complex flows into additional functions instead of nesting."

formatting_rules:
  severity: must
  line_length:
    max_characters: 120
    enforcement: strict
  indentation:
    type: spaces
    count: 4
  syntax_preferences:
    severity: must
    test_ref: unnecessary-braces-removal
    braces_and_parens:
      unnecessary_removal: required
      single_statement_blocks: "No braces"
      arrow_functions: "Minimal syntax"
  blank_lines:
    guidelines:
      before_braced_statements: required
      logical_sections: "Separate with blanks"
      comment_blocks: "Blank before first comment"

function_structure:
  severity: should
  function_placement:
    core_principle: "Functions belong at the top of their narrowest usage scope"
    scope_hierarchy:
      - "Used by one function: top of that function"
      - "Used by one component: top of that component"
      - "Used by multiple components: top of module"
    execution_order: "Within each scope, functions before variables before execution"
  anonymous_functions:
    single_line: "Allowed inline"
    multi_line: "Must be named"
    arrow_vs_function: "Prefer arrow for anonymous"

language_features:
  severity: must
  variables:
    preferred: const
    fallback: let
    forbidden: var
  strings:
    quote_style: "Single quotes"
    exception: "Contains single quotes"
  objects_arrays:
    trailing_commas: "Required in multiline"
  control_flow:
    severity: must
    if_else: "Avoid, prefer ternary or early return"
    nested_ternary: forbidden
    switch_statements: "Avoid, use functions"
    for_loops: "Forbidden, use functional patterns"

error_handling:
  severity: should
  pure_functions: "No exceptions"
  boundaries: "Try/catch allowed"
  async_operations: "Prefer async/await"
  promise_rejections: "Explicit handling required"

documentation:
  severity: must
  test_ref: sig-documentation-compliance
  sig_annotations:
    required_for: ["top level functions", "functions over 5 lines"]
    format: "Hindley-Milner"
    type_casing: "Capitalized primitives"
    optional_types: "Type?"
  inline_comments:
    single_line: "//"
    multi_line: "/* */"
    purposes: ["variable purpose", "business logic", "non-obvious details"]

react_specific:
  severity: should
  components:
    class_components: "Forbidden"
    jsx_complexity_limit: "20 lines"
    extract_when_exceeded: required
  state_management:
    preferred: "Redux with selectors"
    useState: "Component local only"
    context: avoid
  ui_library: "Radix UI with Radix Themes, Vanilla Extract"
  logic_separation:
    calculatable_ui_logic: "Extract to pure functions"
    testable_functions: "Prefer over JSX embedded"

naming_conventions:
  severity: must
  files:
    react_components: "PascalCase single word .jsx"
    other_files: "kebab-case .js"
  abbreviations: "Single uppercase character"
  examples:
    react_correct: "SegmentCurbEditor.jsx"
    react_incorrect: "segment-curb-editor.jsx"
    other_correct: "ui-calculations.js"
    other_incorrect: "uiCalculations.js"

module_system:
  severity: must
  import_style: "ES6 import"
  require: forbidden
  exports:
    single_export_statement: required
    location: "Bottom of file"
    default_exports: avoid

security_rules:
  severity: must
  input_validation: "Required at boundaries"
  data_sanitization: "Before database operations"
  secrets: "Environment variables only"
  sensitive_data: "Never commit"

package_management:
  severity: must
  preferred: yarn
  forbidden: npm

libraries:
  severity: should
  functional: "Home grown in @functional"
  runtime_validation: "tagged and taggedSum from @tagged/type"
  testing: "Node TAP"
  react_props: "PropTypes for exported components"

behavioral_constraints:
  severity: must
  code_modification: "Only task-related changes"
  guessing: "Forbidden, ask questions instead"
  response_length: "Prefer brief answers"

testing_requirements:
  severity: must
  test_ref: testing-format-compliance
  framework: "Node TAP"
  file_pattern: "test/*.tap.js"
  command: tap
  execution:
    all_tests: "yarn tap"
    single_test: "tap test/filename.tap.js"
  documentation_style:
    purpose: "Tests act as documentation"
    structure: "Given/when/then required"
    nesting: "Proper test hierarchy"
    descriptions: "Proper English with articles required"
  test_structure:
    outer_test: "Given [scenario context]"
    inner_test: "When [action occurs]"
    assertion: "Then [expected outcome]"
    proper_english: true
    articles_required: ["the", "a", "an"]
  description_rules:
    avoid_programming_notation: true
    avoid_symbols: ["=", "+", "()", "programming variables"]
    use_natural_language: true
    examples:
      correct:
        - "Given a user clicks the Add Segment button"
        - "When there are no existing segments"
        - "Then one segment of 20 feet is added"
        - "Then the segment lengths and the remaining unknown length always total to the blockface length"
      incorrect:
        - "processAddSegment returns 20"
        - "should maintain blockfaceLength = sum(segments) + unknownRemaining"
        - "has start + 2 segment ends + final tick"
        - "When calculating dropdown position"
  test_methodology:
    pure_function_testing: "Preferred"
    mocking: "Avoid when possible"
    test_real_functions: true
    verify_sig_contracts: required
  assertion_style:
    method: "t.equal, t.same, t.ok"
    description_format: "Natural English sentence"
    example: 't.equal(result.segments.length, 1, "Then one segment is added")'
