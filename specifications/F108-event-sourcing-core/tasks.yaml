references:
  - name: "event-sourcing"
    path: ../../docs/architecture/event-sourcing.md
  - name: "multi-tenant"
    path: ../docs/architecture/multi-tenant.md
  - name: "authentication"
    path: ../docs/architecture/authentication.md

current_task: "task_2_final_orchestration"
status: "pending"

# Reference: See ../../docs/architecture/event-sourcing.md for detailed patterns, helper signatures, and decision log

tasks:
  - id: "task_1_1_create_tagged_types_and_helpers"
    description: "Create ActionRequest and Action tagged types with Firestore integration helpers"
    status: "completed"
    phase: "Foundation"
    dependencies: [ ]
    estimated_hours: 5
    implementation: |
        - Create ActionRequest and Action (DomainEvent) in modules/curb-map/type-definitions/
      - Add toFirestore/fromFirestore functions while leaving raw Date values on the tagged types
      - Mark timestamp-bearing fields via `Type.timestampFields` so facades can handle conversion per runtime
      - Add comprehensive error handling and validation
      - Follow existing patterns from audit-record.js and operation-details.js
    validation:
      - "Tagged types validate ActionRequest structure correctly"
      - "toFirestore/fromFirestore functions handle Date/ServerTimestamp conversion"
      - "Date conversion functions work correctly in client context"
      - "Error handling covers edge cases"
      - "Types integrate with existing Firestore patterns"
    tests:
      - "modules/curb-map/test/action-request-types.tap.js"
      - "modules/curb-map/test/firestore-helpers.tap.js"

  - id: "task_1_2_setup_integration_testing"
    description: "Set up Firebase emulator integration testing infrastructure"
    status: "completed"
    phase: "Foundation"
    dependencies:
      - "task_1_1_create_tagged_types_and_helpers"
    estimated_hours: 4
    implementation: |
      - Create test utilities following firebase-integration-tests-strategy.md
      - Set up namespaced testing with DISABLE_TRIGGERS support
      - Create seed/cleanup utilities for test isolation
      - Add emulator configuration and CI/CD integration
      - Create actual test files to validate the integration testing setup works
    validation:
      - "Test isolation works with namespaced data"
      - "Trigger guards prevent unwanted side effects during seeding"
      - "Cleanup removes only test data"
      - "Integration testing examples from firebase-integration-tests-strategy.md work"
    tests:
      - "modules/curb-map/test/firestore-admin.firebase.js"

  - id: "task_1_3_create_functions_workspace"
    description: "Create dedicated Firebase functions workspace following firebase-functions-deploy.md"
    status: "completed"
    phase: "Foundation"
    dependencies:
      - "task_1_1_create_tagged_types_and_helpers"
    estimated_hours: 3
    implementation: |
      - Create modules/curb-map-functions workspace with package.json
      - Add Firebase dependencies (firebase-functions, firebase-admin)
      - Add internal package dependencies via workspace aliases
      - Set up esbuild bundling configuration
      - Update firebase.json to point to the functions workspace
      - Add build and deploy scripts following firebase-functions-deploy.md patterns
    validation:
      - "Functions workspace builds successfully"
      - "Firebase CLI can deploy from the workspace"
      - "Internal packages are available during build"
      - "CI/CD workflow can build and deploy functions"
    tests:
      - "modules/curb-map-functions/test/build.tap.js"
      - "modules/curb-map-functions/test/deploy.tap.js"

  - id: "task_1_4_create_minimal_giant_function"
    description: "Create minimal queue processing function for integration testing"
    status: "completed"
    phase: "Foundation"
    dependencies:
      - "task_1_2_setup_integration_testing"
      - "task_1_3_create_functions_workspace"
    estimated_hours: 4
    implementation: |
      - Create minimal queue processing function in modules/curb-map-functions/src/
      - Implement trigger guard (DISABLE_TRIGGERS) for test seeding
      - Add structured logging and error handling
      - Focus on enabling integration tests, not full production features
        - Use ActionRequest and Action types from curb-map workspace
    validation:
      - "Function processes queue items and creates events"
      - "Trigger guard works correctly during test seeding"
      - "Error handling and logging function properly"
      - "Function integrates with tagged types correctly"
    tests:
      - "modules/curb-map-functions/test/minimal-giant-function.tap.js"
      - "modules/curb-map-functions/test/minimal-giant-function.firebase.js"

  - id: "task_1_5_create_queue_collection"
    description: "Create Firestore actionRequests and completedActions collections with security rules and indexes"
    status: "completed"
    phase: "Foundation"
    dependencies:
      - "task_1_4_create_minimal_giant_function"
    estimated_hours: 6
    implementation: |
      ‚úÖ Created ActionRequest type (renamed from QueueItem) in modules/curb-map/type-definitions/
      ‚úÖ Added new SOC2 fields to ActionRequest: subject, organizationId, projectId, correlationId, schemaVersion
      ‚úÖ Removed eventId field (simplified to use id for both collections)
      ‚úÖ Updated collection name from 'queueItems' to 'actionRequests' in firestore-facade-shared.js
      ‚úÖ Added 'completedActions' collection registration (write-once, immutable audit trail)
      ‚úÖ Removed incorrect 'actions' collection registration
      ‚úÖ Created firestore.indexes.json with composite indexes:
        * actionRequests: organizationId + status + createdAt
        * actionRequests: actorId + status + createdAt
        * actionRequests: organizationId + projectId + status + createdAt
        * completedActions: organizationId + createdAt
        * completedActions: organizationId + projectId + createdAt
        * completedActions: organizationId + actorId + createdAt
        * completedActions: idempotencyKey
      ‚úÖ Updated firestore.rules for actionRequests collection with comprehensive field validation:
        * Validate all ID field formats (acr_, usr_, org_, prj_, idm_, cor_)
        * Validate subjectType enum (user, organization, project)
        * Validate status enum (pending, completed, failed)
        * Validate schemaVersion (must be 1)
        * Ensure pending requests have no resultData/error/processedAt
        * Allow authenticated users to create if actorId matches auth.uid
        * Allow users to read their own requests and organization members to read org requests
        * Prevent all client updates (only Cloud Functions can update)
      ‚úÖ Added firestore.rules for completedActions collection:
        * Read-only for authorized users within organization
        * Write-only for Firebase Functions (no client writes)
      ‚úÖ Updated documentation to remove eventId references
      ‚úÖ Created integration test: modules/curb-map/test/action-request-collection.firebase.js
      üìù Next: Update handle-action-request-added.js to copy completed ActionRequest to completedActions
      üìù Next: Validate behaviour locally with Firebase emulator
    validation:
      ‚úÖ "ActionRequest type exists with all SOC2 fields (subject, organizationId, correlationId, schemaVersion)"
      ‚úÖ "eventId field removed (simplified architecture using id for both collections)"
      ‚úÖ "actionRequests collection registered and accepts creates from authenticated users"
      ‚úÖ "completedActions collection registered as write-once, immutable"
      ‚úÖ "Comprehensive field-level validation in security rules"
      ‚úÖ "Client cannot update any fields in actionRequests (only Cloud Functions)"
      ‚úÖ "Composite indexes created for efficient queries"
      üìù "Unauthorized writes/reads are rejected by emulator security tests"
      üìù "Rule + index deployments logged in infrastructure runbook"
    tests:
      - "modules/curb-map/test/firestore-admin.firebase.js"

  - id: "task_2_final_orchestration"
    description: "Add idempotency check and completedActions audit trail"
    status: "pending"
    phase: "Function Implementation"
    dependencies:
      - "task_1_5_create_queue_collection"
    estimated_hours: 1
    implementation: |
      - Update `modules/curb-map/functions/src/handle-action-request-added.js`:
        1. Add idempotency check: Query completedActions by idempotencyKey before processing
        2. If found, return early with existing result (log replay attempt)
        3. After successful completion, copy ActionRequest to completedActions collection
      - This completes the core event sourcing infrastructure (actionRequests ‚Üí completedActions audit trail)
      - Authorization and domain handlers will be added in F109/F110
    validation:
      - "Duplicate idempotency keys return early without reprocessing"
      - "Completed action requests are copied to completedActions collection"
      - "Idempotency check logged for audit trail"
    tests:
      - "modules/curb-map/test/minimal-giant-function.firebase.js (extend existing tests)"
    notes: |
      Collapsed from over-engineered task_2_2, task_2_3, task_3_1, task_5_1.
      - task_3_1 deleted: Action tagged types already provide validation
      - task_5_1 deleted: integration tests already exist (minimal-giant-function.firebase.js)
      - Authorization (F109) and domain handlers (F110) deferred to those specs

completed: [ "task_1_1_create_tagged_types_and_helpers", "task_1_2_setup_integration_testing", "task_1_3_create_functions_workspace", "task_1_4_create_minimal_giant_function", "task_1_5_create_queue_collection" ]

deleted_as_overengineered:
  - "task_2_2_giant_function - collapsed into task_2_final_orchestration"
  - "task_2_3_idempotency - collapsed into task_2_final_orchestration"
  - "task_3_1_event_types - Action tagged types already provide validation"
  - "task_5_1_integration_testing - minimal-giant-function.firebase.js already exists"

notes: |
  This specification implements the core event sourcing INFRASTRUCTURE for CurbMap.

  SCOPE: This spec covers infrastructure only:
  - Action request queue processing (actionRequests ‚Üí completedActions)
  - Validation (structure checking)
  - Idempotency (duplicate prevention)
  - Orchestration (dispatch to domain handlers)
  - Audit trail (completedActions collection)

  OUT OF SCOPE (belongs in other specs):
  - Authorization: F109 task_4_2 (authorization middleware)
  - Domain logic: F110 (organization/project/user event handlers)
  - Materialized views: F110 task_3_1, task_3_2, task_3_3
  - Client-side queue: F111 (offline queue architecture)
  - Action request helpers: F111 task_1_1 (client-side, deferred until Actions defined)

  Task ID format: task_{phase}_{sequence}_{description}
  Status values: pending, in_progress, completed, blocked, cancelled
  Dependencies: List of task IDs that must be completed first
  Validation: Specific criteria that must be met for task completion
