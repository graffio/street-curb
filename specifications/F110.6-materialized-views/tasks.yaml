# F110.6 - Materialized Views [OBSOLETE]

status: "obsolete"
obsoleted_date: "2025-01-15"
obsoleted_reason: "F110 handlers write directly to domain collections, which serve as both domain model and queryable views"

# This specification is no longer needed
# See: specifications/F110-multi-tenant-data-model/ for actual implementation
# See: specifications/F110.6-materialized-views/background.md for explanation

current_task: null

tasks:
  - id: "task_1_views"
    description: "Create materialized views for organizations, projects, and users"
    status: "obsolete"
    phase: "Materialized Views"
    obsoleted_reason: |
      F110 handlers already provide this functionality:
      - OrganizationCreated/Updated/Suspended/Deleted handlers write to /organizations/{id}
      - UserCreated/Updated/Deleted/Forgotten/RoleAssigned handlers write to /users/{id}
      - OrganizationCreated handler writes default project to /organizations/{orgId}/projects/{id}

      These collections include all necessary metadata (createdAt, createdBy, updatedAt, updatedBy)
      and are immediately queryable. No separate view-building trigger needed.
    dependencies:
      - "F110:task_1_domain_events"
    estimated_hours: 8
    notes: |
      Original plan was to:
      - Listen to completedActions onCreate
      - Build separate materialized view collections
      - Track lastProcessedActionId for idempotency

      Actual implementation:
      - Handlers write final state directly to domain collections
      - No lag between action completion and view availability
      - Simpler architecture with fewer moving parts

completed: []

notes: |
    This specification is OBSOLETE.

    Originally planned to create materialized views by listening to completedActions.
    However, F110 implementation writes directly to domain collections, which serve
    as both domain model storage and queryable views.

    SUPERSEDED BY:
    - F110: Domain model (handlers write to /organizations, /users, /projects)
    - F110.7: HTTP action submission (replaces Firestore triggers)

    See background.md for detailed explanation and future considerations.
