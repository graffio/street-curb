current_task: null
status: "deferred"

# DEFERRED: This specification is deferred until after F110 (Multi-Tenant Data Model) is complete.
# Rationale: Cannot properly define authorization without first defining the domain model.
#
# Once F110 defines the domain model (Action types, event handlers), this spec will implement:
# - Authentication system (passcode, custom claims)
# - Authorization middleware (permission checking)
# - CRUD APIs for organizations/projects/users
# - Data isolation and security

# Reference: See docs/architecture/authentication.md for detailed Firebase Auth patterns, custom claims structure, and impersonation system

tasks:
  - id: "task_1_authentication"
    description: "Implement Firebase Auth with custom claims"
    status: "pending"
    phase: "Authentication"
    dependencies:
      - "F110:task_1_domain_events"
    estimated_hours: 8
    implementation: |
        - Configure Firebase Auth for passcode authentication (manual setup, not code)
        - Implement passcode verification and token generation
        - Create custom claims system (organization roles and permissions)
        - Integrate with F110 domain model (user/organization lookup)
        - Log authentication events to F108 event sourcing
        - Basic auth middleware (token verification, user context injection)
    validation:
      - "Passcode authentication works with Firebase Auth"
      - "Custom claims include organization roles"
      - "Auth middleware verifies tokens correctly"
    tests:
      - "modules/curb-map/functions/test/authentication.tap.js"
    notes: |
      Simplified from original F109 tasks (removed SMS delivery complexity, impersonation).
      Focus on core auth needed for APIs.

  - id: "task_2_authorization"
    description: "Implement authorization via Firestore security rules"
    status: "pending"
    phase: "Authorization"
    dependencies:
      - "task_1_authentication"
    estimated_hours: 6
    implementation: |
        - Complete Firestore security rules for authorization (building on F108 task_1_5)
        - Add rules for hierarchical collections (/organizations/{orgId}/projects/{projId})
        - Implement permission checking using custom claims in security rules
        - Add organization-scoped access control rules
        - Ensure rules enforce role-based permissions (admin, member, guest)
        - Test unauthorized access attempts are rejected
    validation:
      - "Security rules enforce permissions correctly"
      - "Organization-scoped access control works"
      - "Role-based permissions enforced in rules"
      - "Unauthorized access attempts rejected"
    tests:
      - "modules/curb-map/test/security-rules.firebase.js"
      - "modules/curb-map/test/data-isolation.firebase.js"
    notes: |
      Authorization via Firestore security rules (not middleware).
      Clients write ActionRequests directly to Firestore.
      Rules check custom claims to enforce permissions.

      CRUD APIs deferred to backlog (for webhooks/external integrations later).

  - id: "task_3_integration_testing"
    description: "End-to-end authentication and authorization testing"
    status: "pending"
    phase: "Integration"
    dependencies:
      - "task_2_authorization"
    estimated_hours: 4
    implementation: |
        - Test complete flow: auth → write ActionRequest → verify security rules → process event
        - Test data isolation between organizations
        - Test role-based access control via security rules
        - Test unauthorized writes are rejected by Firestore rules
    validation:
      - "End-to-end workflow works correctly"
      - "Data isolation maintained across organizations"
      - "Security rules enforce permissions correctly"
    tests:
      - "modules/curb-map/functions/test/auth-integration.firebase.js"

completed: []

deleted_as_overengineered:
  - "Passcode delivery (task_1_2) - Firebase Auth handles SMS natively"
  - "Impersonation (task_3_1, task_3_2) - defer to backlog (production support needs)"
  - "Operational monitoring (task_5_2) - defer to backlog (production deployment)"
  - "Load testing (part of task_5_1) - defer to backlog"

moved_to_backlog:
  - "CRUD APIs (organizations, projects, users) - needed for webhooks/external integrations but not MVP"
  - "Authorization middleware - using Firestore security rules instead"

notes: |
    This specification implements authentication and authorization for CurbMap.

    SCOPE:
    - Firebase Auth integration (passcode authentication)
    - Custom claims (organization roles and permissions)
    - Basic auth middleware (token verification)
    - Firestore security rules (authorization via rules, not middleware)
    - Role-based permissions enforced in security rules

    OUT OF SCOPE (moved to backlog):
    - CRUD APIs (clients write ActionRequests directly for MVP)
    - Authorization middleware (security rules sufficient)

    DEPENDS ON:
    - F110: Domain model definition (Action types, event handlers)

    Total: 18 hours (simplified from 42 hours in original F109)

    Task ID format: task_{phase}_{sequence}_{description}
    Status values: pending, in_progress, completed, blocked, cancelled
    Dependencies: List of task IDs that must be completed first
    Validation: Specific criteria that must be met for task completion
