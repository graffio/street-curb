spec_format:
  version: 1.0
  description: "Task-level implementation for SegmentedCurbEditor ecosystem pure JSX migration"

architecture_principles:
  - pure_jsx_elements: "All visual components as JSX, no CSS class dependencies"
  - radix_theme_only: "Use only Radix Theme components and CSS variables"
  - state_driven_interactions: "Hover/focus/drag effects via React state, not CSS"
  - functional_equivalence: "User workflows work, pixel-perfect appearance not required"
  - interface_flexibility: "New component props acceptable for better architecture"
  - component_isolation: "Each component independently testable in Storybook"
  - stories_first_tdd: "Define behavior in Storybook with placeholder components before full implementation"
  - placeholder_components: "Start with props interface and minimal render to enable immediate story testing"

component_mapping:
  css_dependent_components:
    - DividerLayer: "Thumb handles via CSS pseudo-elements"
    - SegmentRenderer: "Segment styling, drag states, unknown space styling"
    - LabelLayer: "Floating labels, dropdowns, positioning"
    - SegmentedCurbEditor: "Container, ruler, controls, drag preview"
    - DragDropHandler: "May have CSS dependencies for drag feedback"
  
  target_components:
    - DividerLayerNew.jsx: "Pure JSX thumb handles with hover state"
    - SegmentRendererNew.jsx: "Pure JSX segments with drag styling"
    - LabelLayerNew.jsx: "Pure JSX labels and dropdowns"
    - SegmentedCurbEditorNew.jsx: "Pure JSX container and controls"
    - DragDropHandlerNew.jsx: "Pure JSX drag feedback if needed"

css_analysis:
  classes_to_migrate:
    divider_classes:
      - ".divider": "Basic divider positioning and cursor"
      - ".divider::before": "Thumb handle appearance"
      - ".divider:hover::before": "Thumb handle hover effects"
    
    segment_classes:
      - ".segment": "Basic segment styling and transitions"
      - ".segment.dragging": "Drag state opacity and transforms"
      - ".unknown-space": "Dashed border styling for unknown segments"
    
    label_classes:
      - ".floating-label": "Label positioning and basic styling"
      - ".dropdown": "Dropdown container styling"
      - ".dropdown-item": "Individual dropdown item styling"
      - ".label-layer": "Label container positioning"
    
    container_classes:
      - ".segment-container": "Main container dimensions and layout"
      - ".tick": "Ruler tick positioning and styling"
      - ".drag-preview": "Drag preview styling during mobile interactions"
      - ".segment-controls-bottom": "Bottom controls container"
      - ".add-segment-button": "Add button styling"
      - ".remaining-space-info": "Remaining space text styling"
      - ".ruler": "Ruler container positioning"

implementation_tasks:
  task_1_divider_migration:
    description: "Migrate DividerLayer to pure JSX with Radix styling using TDD approach"
    commands:
      - "Create Storybook story with side-by-side comparison framework"
      - "Create DividerLayerNew.jsx placeholder with expected props interface"
      - "Iteratively implement: positioning → thumb handles → hover effects → interactions"
      - "Use Radix CSS variables for colors and spacing"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DividerLayerNew.stories.jsx
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DividerLayerNew.jsx
    changes:
      - "Create side-by-side comparison story (original vs new)"
      - "Start with placeholder component accepting props but rendering 'Coming Soon'"
      - "Implement pure JSX structure with Radix Box components"
      - "Add hover state management with React useState"
      - "Use var(--gray-a-8) and var(--gray-a-10) for thumb colors"
      - "Implement positioning logic and interaction handlers"
    validation:
      - files_exist: "Both story and component files created"
      - props_interface: "Component accepts expected props and logs them"
      - no_css_classes: "No className props in component for styling"
      - side_by_side_working: "Story shows both original and new versions"
      - functional_equivalence: "New component provides same divider functionality"

  task_2_segment_renderer_migration:
    description: "Migrate SegmentRenderer to pure JSX with Radix styling"
    commands:
      - "Create SegmentRendererNew.jsx replacing all CSS classes"
      - "Implement drag states via React props and state"
      - "Use Radix colors for segment types and unknown space"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentRendererNew.jsx
    changes:
      - "Replace .segment class with Radix Box styling"
      - "Implement .dragging state via opacity and transform props"
      - "Replace .unknown-space with Radix styling and dashed borders"
      - "Use COLORS constants with Radix fallbacks"
    validation:
      - file_exists: "SegmentRendererNew.jsx created"
      - no_css_classes: "No className props except for drag handler refs"
      - drag_states: "Dragging state visual effects work correctly"
      - segment_colors: "All segment type colors render correctly"

  task_3_label_layer_migration:
    description: "Migrate LabelLayer to pure JSX with Radix styling"
    commands:
      - "Create LabelLayerNew.jsx with pure JSX label and dropdown structure"
      - "Implement dropdown interactions via React state"
      - "Use Radix positioning and styling for floating labels"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/LabelLayerNew.jsx
    changes:
      - "Replace .floating-label with Radix Box components"
      - "Replace .dropdown and .dropdown-item with Radix components"
      - "Implement label positioning via style props"
      - "Use Radix color system for label backgrounds"
    validation:
      - file_exists: "LabelLayerNew.jsx created"
      - no_css_classes: "No className props in component"
      - dropdown_behavior: "Dropdown interactions work correctly"
      - label_positioning: "Smart positioning algorithm still functions"

  task_4_drag_drop_handler_migration:
    description: "Migrate DragDropHandler to pure JSX approach"
    commands:
      - "Analyze DragDropHandler for CSS dependencies"
      - "Create DragDropHandlerNew.jsx if CSS migration needed"
      - "Ensure drag feedback uses Radix styling"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DragDropHandlerNew.jsx
    changes:
      - "Remove any CSS class dependencies in drag feedback"
      - "Use Radix styling for any visual drag indicators"
      - "Maintain exact same handler interface and behavior"
    validation:
      - file_exists: "DragDropHandlerNew.jsx created if needed"
      - no_css_classes: "No className dependencies for styling"
      - drag_behavior: "All drag and drop interactions preserved"

  task_5_main_editor_migration:
    description: "Migrate SegmentedCurbEditor main component to pure JSX"
    commands:
      - "Create SegmentedCurbEditorNew.jsx replacing all CSS classes"
      - "Implement ruler, controls, and container with Radix components"
      - "Update component imports to use *New versions"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditorNew.jsx
    changes:
      - "Replace .segment-container with Radix container styling"
      - "Replace .tick, .ruler with Radix positioned elements"
      - "Replace .segment-controls-bottom, .add-segment-button with Radix buttons"
      - "Replace .drag-preview with Radix styled preview"
      - "Import and use all *New component versions"
    validation:
      - file_exists: "SegmentedCurbEditorNew.jsx created"
      - no_css_classes: "No className props except for functional refs"
      - component_integration: "All sub-components integrate correctly"
      - full_functionality: "Complete editor functionality preserved"

  task_6_storybook_integration:
    description: "Update Storybook stories to showcase complete migration"
    commands:
      - "Create comprehensive Storybook stories for all components"
      - "Add side-by-side comparisons for each component"
      - "Create full SegmentedCurbEditor comparison story"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditorNew.stories.jsx
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentRendererNew.stories.jsx
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/LabelLayerNew.stories.jsx
    changes:
      - "Create isolated stories for each new component"
      - "Add full ecosystem comparison story"
      - "Document interaction differences and improvements"
    validation:
      - stories_render: "All new stories render without errors"
      - visual_parity: "Side-by-side comparisons show identical behavior"
      - interaction_testing: "All interactions testable in Storybook"

  task_7_integration_testing:
    description: "Test complete ecosystem integration and performance"
    commands:
      - "Test all component interactions work together"
      - "Verify drag and drop across all components"
      - "Performance test with complex segment configurations"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditorNew.jsx
    changes:
      - "Integration testing and bug fixes"
      - "Performance optimization if needed"
      - "Final visual fidelity adjustments"
    validation:
      - full_integration: "Complete editor works identically to original"
      - performance_maintained: "No significant performance degradation"
      - mobile_compatible: "All touch interactions work on mobile"

execution_status:
  current_task: "task_2_segment_renderer_migration"
  completed_tasks: 
    - task_1_divider_migration: "COMPLETED - DividerLayerNew.jsx functional with pure JSX thumb handles, React hover state, and Radix CSS variables"
  pending_tasks:
    - task_2_segment_renderer_migration: "NEXT"
    - task_3_label_layer_migration: "PENDING"
    - task_4_drag_drop_handler_migration: "PENDING"
    - task_5_main_editor_migration: "PENDING"
    - task_6_storybook_integration: "PENDING"
    - task_7_integration_testing: "PENDING"
  failed_tasks: []
  notes: "Task 1 completed successfully. DividerLayerNew replaces CSS pseudo-elements with pure JSX, uses React state for hover effects, and Radix CSS variables for theming. Ready for task 2."

validation_criteria:
  technical:
    - "No external CSS dependencies in any component"
    - "Only React and Radix Theme imports"
    - "All visual elements as JSX components"
    - "State-driven interactions throughout"
  
  visual:
    - "Complete visual parity with original ecosystem"
    - "All animations and transitions preserved"
    - "Responsive behavior maintained"
    - "Mobile touch interactions identical"
  
  functional:
    - "All drag and drop operations preserved"
    - "Label positioning and collision detection working"
    - "Segment editing and type changing functional"
    - "Add/remove segment operations working"
    - "Redux integration maintained"

architecture_benefits:
  - "Maximum flexibility for future LLM-driven changes"
  - "No CSS debugging required for styling changes"
  - "All styling logic visible in JSX"
  - "Easier testing and component isolation"
  - "Consistent Radix theme integration"
  - "Reduced tech debt for future features"