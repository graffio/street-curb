spec_format:
  version: 1.0
  description: "Task-level implementation for SegmentedCurbEditor ecosystem pure JSX migration"

architecture_principles:
  - pure_jsx_elements: "All visual components as JSX, no CSS class dependencies"
  - radix_theme_only: "Use only Radix Theme components and CSS variables"
  - state_driven_interactions: "Hover/focus/drag effects via React state, not CSS"
  - functional_equivalence: "User workflows work, pixel-perfect appearance not required"
  - redux_integration: "Use useSelector for Redux data, no prop drilling"
  - channel_coordination: "Use dragStateChannel for UI state coordination"
  - component_decomposition: "Split into individual sub-components (e.g., SegmentItem, DividerThumb)"
  - comprehensive_documentation: "Include detailed file header explaining architecture and interfaces"
  - precise_types: "Use specific type signatures, not vague 'Object' types"
  - component_isolation: "Each component independently testable in Storybook"
  - stories_first_tdd: "Define behavior in Storybook with placeholder components before full implementation"
  - consistency_patterns: "Base new components on existing *New.jsx architecture patterns"

component_mapping:
  css_dependent_components:
    - DividerLayer: "Thumb handles via CSS pseudo-elements"
    - SegmentRenderer: "Segment styling, drag states, unknown space styling"
    - LabelLayer: "Floating labels, dropdowns, positioning"
    - SegmentedCurbEditor: "Container, ruler, controls, drag preview"
    - DragDropHandler: "May have CSS dependencies for drag feedback"
  
  target_components:
    - DividerLayerNew.jsx: "Pure JSX thumb handles with hover state"
    - SegmentRendererNew.jsx: "Pure JSX segments with drag styling"
    - LabelLayerNew.jsx: "Pure JSX labels and dropdowns"
    - SegmentedCurbEditorNew.jsx: "Pure JSX container and controls"
    - DragDropHandlerNew.jsx: "Pure JSX drag feedback if needed"

css_analysis:
  classes_to_migrate:
    divider_classes:
      - ".divider": "Basic divider positioning and cursor"
      - ".divider::before": "Thumb handle appearance"
      - ".divider:hover::before": "Thumb handle hover effects"
    
    segment_classes:
      - ".segment": "Basic segment styling and transitions"
      - ".segment.dragging": "Drag state opacity and transforms"
      - ".unknown-space": "Dashed border styling for unknown segments"
    
    label_classes:
      - ".floating-label": "Label positioning and basic styling"
      - ".dropdown": "Dropdown container styling"
      - ".dropdown-item": "Individual dropdown item styling"
      - ".label-layer": "Label container positioning"
    
    container_classes:
      - ".segment-container": "Main container dimensions and layout"
      - ".tick": "Ruler tick positioning and styling"
      - ".drag-preview": "Drag preview styling during mobile interactions"
      - ".segment-controls-bottom": "Bottom controls container"
      - ".add-segment-button": "Add button styling"
      - ".remaining-space-info": "Remaining space text styling"
      - ".ruler": "Ruler container positioning"

implementation_tasks:
  task_1_divider_migration:
    description: "Migrate DividerLayer to pure JSX with Radix styling using TDD approach"
    commands:
      - "Create Storybook story with side-by-side comparison framework"
      - "Create DividerLayerNew.jsx placeholder with expected props interface"
      - "Iteratively implement: positioning → thumb handles → hover effects → interactions"
      - "Use Radix CSS variables for colors and spacing"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DividerLayerNew.stories.jsx
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DividerLayerNew.jsx
    changes:
      - "Create side-by-side comparison story (original vs new)"
      - "Start with placeholder component accepting props but rendering 'Coming Soon'"
      - "Implement pure JSX structure with Radix Box components"
      - "Add hover state management with React useState"
      - "Use var(--gray-a-8) and var(--gray-a-10) for thumb colors"
      - "Implement positioning logic and interaction handlers"
    validation:
      - files_exist: "Both story and component files created"
      - props_interface: "Component accepts expected props and logs them"
      - no_css_classes: "No className props in component for styling"
      - side_by_side_working: "Story shows both original and new versions"
      - functional_equivalence: "New component provides same divider functionality"

  task_2_segment_renderer_migration:
    description: "Migrate SegmentRenderer to pure JSX with Redux and channel integration"
    commands:
      - "Create Storybook story with side-by-side comparison framework"
      - "Create SegmentRendererNew.jsx with Redux useSelector integration"
      - "Implement individual SegmentItem and UnknownSpaceItem components"
      - "Use drag state channel for UI coordination"
      - "Replace all CSS classes with Radix Box components"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentRendererNew.jsx
      - modules/right-of-way-editor/src/stories/SegmentRendererNew.stories.jsx
    changes:
      - "Create side-by-side comparison story with Redux provider"
      - "Use useSelector for segments, total, unknownRemaining (no props)"
      - "Use drag state channel for draggingIndex coordination"
      - "Replace .segment class with Radix Box styling"
      - "Replace .dragging state with channel-driven visual effects"
      - "Replace .unknown-space with Radix Box and dashed border styling"
      - "Create individual SegmentItem components with local hover state"
      - "Use COLORS constants with Radix CSS variable fallbacks"
    validation:
      - files_exist: "Both component and story files created"
      - redux_integration: "Component uses useSelector, no Redux props"
      - channel_integration: "Uses drag state channel for UI state"
      - no_css_classes: "No className props except for drag handler refs"
      - drag_states: "Channel-driven drag visual effects work correctly"
      - segment_colors: "All segment type colors render with Radix variables"
      - storybook_working: "Side-by-side story renders with Redux"

  task_3_label_layer_migration:
    description: "Migrate LabelLayer to pure JSX with Redux and channel integration"
    commands:
      - "Create Storybook story with side-by-side comparison framework"
      - "Create LabelLayerNew.jsx with comprehensive file header documentation"
      - "Implement individual LabelItem and DropdownItem components"
      - "Use Redux useSelector for segment data, channel for UI state"
      - "Replace all CSS classes with Radix Box components"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/LabelLayerNew.jsx
      - modules/right-of-way-editor/src/stories/LabelLayerNew.stories.jsx
    changes:
      - "Create side-by-side comparison story with Redux provider"
      - "Add comprehensive file header explaining component architecture and interfaces"
      - "Use useSelector for segments data (no props)"
      - "Use channel for dropdown/label UI state coordination"
      - "Replace .floating-label with Radix Box components"
      - "Replace .dropdown and .dropdown-item with individual components"
      - "Implement precise type signatures for all interfaces"
      - "Follow DividerLayerNew/SegmentRendererNew patterns"
    validation:
      - files_exist: "Both component and story files created"
      - redux_integration: "Component uses useSelector, no Redux props"
      - channel_integration: "Uses appropriate channels for UI state"
      - no_css_classes: "No className props in components"
      - precise_types: "All function signatures use specific types"
      - comprehensive_docs: "File header explains architecture and interfaces"
      - storybook_working: "Side-by-side story renders with Redux"

  task_4_drag_drop_handler_migration:
    description: "Review and update DragDropHandler for channel integration"
    commands:
      - "Analyze existing DragDropHandler for CSS and state dependencies"
      - "Update to work with dragStateChannel instead of local state"
      - "Ensure drag feedback integrates with channel system"
      - "Create comprehensive documentation for handler interfaces"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/DragDropHandler.jsx (analysis/update)
    changes:
      - "Update drag handlers to set dragStateChannel state"
      - "Remove any CSS class dependencies in drag feedback"
      - "Ensure handler methods work with SegmentRendererNew/DividerLayerNew"
      - "Add comprehensive interface documentation"
      - "Maintain backward compatibility with existing components"
    validation:
      - channel_integration: "Handlers set dragStateChannel state correctly"
      - no_css_classes: "No className dependencies for styling"
      - interface_compatibility: "Works with existing *New components"
      - comprehensive_docs: "Handler interfaces fully documented"

  task_5_main_editor_migration:
    description: "Migrate SegmentedCurbEditor main component with full Redux/channel integration"
    commands:
      - "Create Storybook story with side-by-side comparison framework"
      - "Create SegmentedCurbEditorNew.jsx with comprehensive file header"
      - "Implement individual sub-components (RulerItem, ControlsPanel, etc.)"
      - "Use Redux useSelector for editor state, channels for UI coordination"
      - "Replace all CSS classes with Radix Box components"
      - "Integrate all *New component versions"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditorNew.jsx
      - modules/right-of-way-editor/src/stories/SegmentedCurbEditorNew.stories.jsx
    changes:
      - "Create side-by-side comparison story with Redux provider"
      - "Add comprehensive file header explaining complete editor architecture"
      - "Use useSelector for blockface/editor state (no props)"
      - "Use channels for drag/UI state coordination across components"
      - "Replace .segment-container with Radix container styling"
      - "Replace .tick, .ruler with individual RulerItem components"
      - "Replace .segment-controls-bottom with ControlsPanel component"
      - "Replace .drag-preview with Radix styled preview"
      - "Import DividerLayerNew, SegmentRendererNew, LabelLayerNew"
      - "Follow established *New.jsx patterns for architecture"
    validation:
      - files_exist: "Both component and story files created"
      - redux_integration: "Uses useSelector for all data, no prop drilling"
      - channel_integration: "Coordinates via channels across all sub-components"
      - no_css_classes: "No className props except for functional refs"
      - component_integration: "All *New sub-components integrate correctly"
      - precise_types: "All interfaces use specific type signatures"
      - comprehensive_docs: "File header explains complete editor architecture"
      - full_functionality: "Complete editor functionality preserved"
      - storybook_working: "Side-by-side story demonstrates full functionality"

  task_6_storybook_integration:
    description: "Enhance and consolidate Storybook stories with comprehensive testing"
    commands:
      - "Review and enhance existing individual component stories"
      - "Create comprehensive ecosystem comparison story"
      - "Add interaction testing and drag state demonstrations"
      - "Document architectural differences and benefits"
    files:
      - modules/right-of-way-editor/src/stories/F114-EcosystemComparison.stories.jsx
      - Enhancement of existing DividerLayerNew.stories.jsx, SegmentRendererNew.stories.jsx, LabelLayerNew.stories.jsx
    changes:
      - "Create comprehensive ecosystem story showing all components together"
      - "Enhance existing stories with better drag state testing"
      - "Add documentation of Redux/channel architecture benefits"
      - "Create interaction testing scenarios for mobile/desktop"
      - "Document performance improvements and maintainability benefits"
    validation:
      - ecosystem_story: "Full ecosystem story renders both old and new versions"
      - enhanced_stories: "Individual stories demonstrate all features"
      - interaction_testing: "Drag states and channels testable via controls"
      - comprehensive_docs: "Stories document architectural benefits"
      - mobile_testing: "Touch interactions work in Storybook"

  task_7_integration_testing:
    description: "Test complete ecosystem integration and performance"
    commands:
      - "Test all component interactions work together"
      - "Verify drag and drop across all components"
      - "Performance test with complex segment configurations"
    files:
      - modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditorNew.jsx
    changes:
      - "Integration testing and bug fixes"
      - "Performance optimization if needed"
      - "Final visual fidelity adjustments"
    validation:
      - full_integration: "Complete editor works identically to original"
      - performance_maintained: "No significant performance degradation"
      - mobile_compatible: "All touch interactions work on mobile"

implementation_guidelines:
  file_structure:
    component_header: "Include comprehensive file header with component purpose, architecture overview, interface documentation, and channel coordination details"
    type_signatures: "Use precise type signatures - DragDropHandler, not 'Object'; include function return types"
    component_decomposition: "Split large components into individual sub-components (e.g., SegmentItem, DividerThumb, RulerItem)"
    
  redux_integration:
    data_access: "Use useSelector for all Redux data access, no prop drilling"
    selectors: "Import specific selectors (selectSegments, selectBlockfaceLength, etc.)"
    no_prop_drilling: "Components connect directly to Redux, parent components don't pass Redux data as props"
    
  channel_coordination:
    ui_state: "Use dragStateChannel for drag/UI state that needs cross-component coordination"
    local_state: "Use React useState for component-local state (hover, expanded, etc.)"
    channel_patterns: "Follow DividerThumb/SegmentItem patterns for channel integration"
    
  component_patterns:
    radix_only: "Use Box from @radix-ui/themes, no HTML elements for styled components"
    css_variables: "Use var(--radix-color-name) for theming, no hardcoded colors"
    event_handlers: "Follow established patterns for drag handlers and event coordination"
    
  storybook_requirements:
    side_by_side: "Every *New component needs side-by-side comparison story"
    redux_provider: "Stories must wrap with Redux Provider and initialize test data"
    real_data: "Use real Redux data via useTestData(), not mock props"
    progress_tracking: "Include implementation progress section in stories"

execution_status:
  current_task: "task_4_drag_drop_handler_migration"
  completed_tasks: 
    - task_1_divider_migration: "COMPLETED - DividerLayerNew.jsx with pure JSX, Redux useSelector, channel coordination"
    - task_2_segment_renderer_migration: "COMPLETED - SegmentRendererNew.jsx with individual components, comprehensive docs"
    - task_3_label_layer_migration: "COMPLETED - LabelLayerNew.jsx with mathematical slot cycling, component-local handlers, TDD Storybook"
  pending_tasks:
    - task_4_drag_drop_handler_migration: "NEXT"
    - task_5_main_editor_migration: "PENDING"
    - task_6_storybook_integration: "PENDING"
    - task_7_integration_testing: "PENDING"
  failed_tasks: []
  notes: "Tasks 1-3 established complete architectural patterns: Redux useSelector, channel coordination, component decomposition, mathematical positioning, component-local event handlers following A001 narrowest scope principle. Task 3 implemented simple slot cycling algorithm that guarantees readable labels."

validation_criteria:
  technical:
    - "No external CSS dependencies in any component"
    - "Only React and Radix Theme imports"
    - "All visual elements as JSX components"
    - "State-driven interactions throughout"
  
  visual:
    - "Complete visual parity with original ecosystem"
    - "All animations and transitions preserved"
    - "Responsive behavior maintained"
    - "Mobile touch interactions identical"
  
  functional:
    - "All drag and drop operations preserved"
    - "Label positioning and collision detection working"
    - "Segment editing and type changing functional"
    - "Add/remove segment operations working"
    - "Redux integration maintained"

architecture_benefits:
  - "Maximum flexibility for future LLM-driven changes"
  - "No CSS debugging required for styling changes"
  - "All styling logic visible in JSX"
  - "Easier testing and component isolation"
  - "Consistent Radix theme integration"
  - "Reduced tech debt for future features"