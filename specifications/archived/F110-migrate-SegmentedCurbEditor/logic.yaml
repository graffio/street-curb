migration:
  target_components:
    - SegmentedCurbEditor.jsx
    - SegmentRenderer.jsx
    - DividerLayer.jsx
    - LabelLayer.jsx
    - DragDropHandler.jsx
    - label-positioning.js

  design_system_integration:
    package: "@qt/design-system"
    dependencies:
      - "@radix-ui/themes"
      - "@vanilla-extract/css"
      - "@vanilla-extract/recipes"
    imports:
      - Box
      - Button
      - Text
      - Select
      - tokens
      - MainTheme

execution_status:
  current_task: "task_3_1_migrate_main_component"
  completed_tasks:
    - task_1_1_add_design_system_dependency: "COMPLETED - dependency already exists in package.json"
    - task_1_2_wrap_with_main_theme: "COMPLETED - MainTheme already imported and wrapping app in main.jsx"
    - task_1_3_add_segment_color_tokens: "COMPLETED - segmentColors contract and theme added to design system tokens"
    - task_2_1_create_css_module: "COMPLETED - SegmentedCurbEditor.css.js created with Vanilla Extract styles using theme tokens"
    - task_2_2_migrate_segment_renderer: "COMPLETED - SegmentRenderer migrated to use Vanilla Extract classes and Radix Box components"
    - task_2_3_migrate_divider_layer: "COMPLETED - DividerLayer migrated to use Vanilla Extract classes and Radix Box components"
    - task_2_4_migrate_label_layer: "COMPLETED - LabelLayer migrated to use Vanilla Extract classes and Radix Box/Select components"
  pending_tasks:
    - task_3_1_migrate_main_component: "NEXT"
    - task_3_2_migrate_ruler_component: "PENDING"
    - task_3_3_migrate_controls_component: "PENDING"
    - task_4_1_optimize_theme_usage: "PENDING"
    - task_4_2_validate_performance: "PENDING"
    - task_4_3_add_missing_tokens: "PENDING"
    - task_4_4_visual_regression_testing: "PENDING"
  failed_tasks: []
  notes: "Task 2.4 completed - LabelLayer migrated and dropdown functionality restored. Ready to test compatibility with old SegmentedCurbEditor"

tasks:
  task_1_1_add_design_system_dependency:
    description: "Add design system package to right-of-way-editor"
    commands:
      - "yarn add @qt/design-system"
    location: "modules/right-of-way-editor"
    validation:
      - package_appears_in_package_json: "Check @qt/design-system in dependencies"
      - import_works: "Test import from @qt/design-system"

  task_1_2_wrap_with_main_theme:
    description: "Wrap application with MainTheme component"
    files:
      - target: "App.jsx or main component that renders SegmentedCurbEditor"
      - import: "import { MainTheme } from '@qt/design-system'"
      - wrap: "<MainTheme><SegmentedCurbEditor /></MainTheme>"
    validation:
      - main_theme_wrapper: "MainTheme component wraps SegmentedCurbEditor"
      - no_console_errors: "No import or render errors"

  task_1_3_add_segment_color_tokens:
    description: "Add segmentColors contract and theme to design system tokens"
    files:
      - target: "modules/design-system/src/themes/tokens.css.js"
      - additions:
          - segmentColors: "Contract for segment type colors"
          - segmentColors_theme: "Radix-based color mapping"
    validation:
      - contract_defined: "segmentColors contract exists in tokens"
      - theme_defined: "segmentColors theme mapping exists"
      - radix_colors_used: "Uses Radix color variables"

  task_2_1_create_css_module:
    description: "Create SegmentedCurbEditor.css.js with Vanilla Extract styles using theme tokens"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditor.css.js"
    structure:
      - container: "Base container styles with Radix tokens"
      - segment: "Recipe with color variants using segmentColors from theme"
      - divider: "Draggable divider styles with theme tokens"
      - label: "Interactive label styles with theme tokens"
      - ruler: "Measurement ruler styles with theme tokens"
      - controls: "Bottom control panel styles with theme tokens"
    validation:
      - file_exists: "SegmentedCurbEditor.css.js exists"
      - vanilla_extract_imports: "style and recipe imports present"
      - theme_tokens_used: "All styles use tokens from @qt/design-system"
      - all_classes_defined: "container, segment, divider, label, ruler, controls defined"

  task_2_2_migrate_segment_renderer:
    description: "Replace inline styles with Vanilla Extract classes in SegmentRenderer"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentRenderer.jsx"
    changes:
      - replace_inline_styles: "Convert style={{}} to className={segment({ type, isDragging })}"
      - integrate_radix_box: "Replace div elements with Box components"
      - preserve_drag_handlers: "Maintain all drag/drop event handlers"
    validation:
      - no_inline_styles: "No style={{}} objects in component"
      - vanilla_extract_used: "segment({ type, isDragging }) pattern used"
      - radix_box_integrated: "Box component from @qt/design-system used"
      - drag_handlers_preserved: "onDragStart, onDrop, onMouseDown handlers intact"
      - visual_consistency: "Segments render with same colors and sizes"

  task_2_3_migrate_divider_layer:
    description: "Replace inline styles with Vanilla Extract classes in DividerLayer"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/DividerLayer.jsx"
    changes:
      - replace_inline_styles: "Convert style={{}} to className={divider}"
      - integrate_radix_box: "Replace div elements with Box components"
      - preserve_drag_handlers: "Maintain drag handlers"
    validation:
      - no_inline_styles: "No style={{}} objects in component"
      - vanilla_extract_used: "divider and dividerHandle classes used"
      - radix_box_integrated: "Box component from @qt/design-system used"
      - drag_handlers_preserved: "onMouseDown, onTouchStart handlers intact"
      - divider_positioning: "Dividers positioned correctly between segments"

  task_2_4_migrate_label_layer:
    description: "Replace inline styles with Vanilla Extract classes in LabelLayer"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/LabelLayer.jsx"
    changes:
      - replace_inline_styles: "Convert style={{}} to className={label}"
      - integrate_radix_components: "Use Box and Select components"
      - preserve_dropdown_functionality: "Maintain type changing dropdown"
    validation:
      - no_inline_styles: "No style={{}} objects in component"
      - vanilla_extract_used: "label class used"
      - radix_components_integrated: "Box and Select from @qt/design-system used"
      - dropdown_functionality: "Type changing dropdown works correctly"
      - label_positioning: "Labels positioned correctly on segments"

  task_3_1_migrate_main_component:
    description: "Replace inline styles with Vanilla Extract classes in main SegmentedCurbEditor"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditor.jsx"
    changes:
      - replace_container_styles: "Convert style={{}} to className={container}"
      - integrate_radix_components: "Use Box, Button, Text components"
      - preserve_state_management: "Maintain Redux integration"
      - preserve_event_handlers: "Maintain all drag/drop functionality"
    validation:
      - container_styles_migrated: "container class from Vanilla Extract used"
      - radix_components_used: "Box, Button, Text from @qt/design-system used"
      - redux_integration_preserved: "useDispatch, useSelector hooks intact"
      - drag_drop_functionality: "All drag/drop operations work correctly"
      - segment_resizing: "Divider dragging resizes segments correctly"
      - segment_reordering: "Drag/drop reorders segments correctly"

  task_3_2_migrate_ruler_component:
    description: "Replace inline styles with Vanilla Extract classes for ruler ticks"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditor.jsx"
    changes:
      - replace_tick_styles: "Convert tick style={{}} to className={tick}"
      - integrate_radix_text: "Use Text component for tick labels"
    validation:
      - no_inline_tick_styles: "No style={{}} objects in tick rendering"
      - radix_text_used: "Text component from @qt/design-system used"
      - tick_positioning: "Ticks positioned correctly on ruler"

  task_3_3_migrate_controls_component:
    description: "Replace inline styles with Vanilla Extract classes for bottom controls"
    files:
      - target: "modules/right-of-way-editor/src/components/SegmentedCurbEditor/SegmentedCurbEditor.jsx"
    changes:
      - replace_controls_styles: "Convert style={{}} to className={controls}"
      - integrate_radix_components: "Use Box, Button, Text components"
      - preserve_button_functionality: "Maintain add segment button functionality"
    validation:
      - no_inline_controls_styles: "No style={{}} objects in controls"
      - radix_components_used: "Box, Button, Text from @qt/design-system used"
      - button_functionality: "Add segment buttons work correctly"

  task_4_1_optimize_theme_usage:
    description: "Fine-tune theme token usage across all components"
    files:
      - all_migrated_components: "All SegmentedCurbEditor components"
    changes:
      - optimize_token_usage: "Ensure consistent theme token usage"
      - remove_hardcoded_values: "Replace any remaining hardcoded values with tokens"
    validation:
      - consistent_token_usage: "All components use theme tokens consistently"
      - no_hardcoded_values: "No hardcoded colors, spacing, or typography values"

  task_4_2_validate_performance:
    description: "Ensure theme integration doesn't impact performance"
    validation:
      - render_performance_maintained: "No degradation in render performance"
      - drag_responsiveness_maintained: "Drag operations remain responsive"
      - memory_usage_stable: "No memory leaks introduced"
      - bundle_size_acceptable: "Design system integration doesn't significantly increase bundle size"

  task_4_3_add_missing_tokens:
    description: "Add any missing theme tokens discovered during migration"
    files:
      - target: "modules/design-system/src/themes/tokens.css.js"
    validation:
      - all_required_tokens_defined: "All tokens used in components are defined"
      - no_undefined_tokens: "No undefined token references"

  task_4_4_visual_regression_testing:
    description: "Ensure theme integration maintains visual consistency"
    validation:
      - pixel_perfect_consistency: "No visual differences in component appearance"
      - color_consistency: "Segment colors match original exactly"
      - layout_consistency: "Component layout and positioning unchanged"
      - interaction_consistency: "Hover, drag, and focus states unchanged"

css_structure:
  vanilla_extract_patterns:
    - style: "Base styles using @vanilla-extract/css"
    - recipe: "Variant-based styles using @vanilla-extract/recipes"
    - tokens: "Design system token integration"
  
  component_styles:
    container:
      base: "Position relative, full width/height, border, border-radius"
      tokens: "tokens.colors.border, tokens.borderRadius.md"
    
    segment:
      base: "Position absolute, full width, box-sizing, transition"
      variants:
        type: "parking, loading, bus, unknown"
        isDragging: "true, false"
      tokens: "segmentColors from theme for each type, tokens.transition"
    
    divider:
      base: "Position absolute, full width, cursor row-resize, touch-action none"
      handle: "Background color, border-radius"
      tokens: "tokens.borderRadius.sm, tokens.colors.muted"
    
    label:
      base: "Position absolute, background, padding, border-radius, font, shadow"
      tokens: "tokens.space.xs, tokens.typography.size.sm, tokens.borderRadius.sm, tokens.colors.surface"
    
    ruler:
      base: "Position absolute, right 0, width 60px, background, border-left"
      tokens: "tokens.colors.border, tokens.colors.surface"
    
    controls:
      base: "Padding, border-top, background"
      tokens: "tokens.space.md, tokens.colors.border, tokens.colors.surface"

safety_measures:
  rollback_strategy:
    - task_level: "Each task can be reverted independently"
    - css_fallback: "Keep original CSS as backup during transition"
    - feature_flags: "Use feature flags to toggle between old/new styling"
    - gradual_rollout: "Deploy to staging first, then production"
  
  testing_requirements:
    - visual_regression: "Zero visual regressions"
    - functionality: "All existing functionality preserved"
    - performance: "Performance maintained or improved"
    - accessibility: "Accessibility compliance maintained"
    - cross_browser: "Cross-browser compatibility preserved"
  
  migration_checklist:
    before_each_task:
      - create_feature_branch: "Isolate changes"
      - write_tests: "Test current behavior"
      - document_styling: "Document current styling"
    
    during_each_task:
      - execute_specific_task: "Follow task description exactly"
      - test_visual_regression: "Visual regression testing"
      - verify_functionality: "Functionality unchanged"
      - update_tests: "Update test suite"
    
    after_each_task:
      - run_full_test_suite: "All tests passing"
      - visual_regression_testing: "No visual changes"
      - performance_testing: "Performance maintained"
      - cross_browser_testing: "Browser compatibility"

success_metrics:
  - zero_visual_regressions: "Pixel-perfect visual consistency"
  - performance_maintained: "No performance degradation"
  - functionality_preserved: "All drag/drop, resizing, type changing works"
  - accessibility_compliance: "WCAG guidelines maintained"
  - cross_browser_compatibility: "Works in Chrome, Firefox, Safari, Edge"
  - code_quality_improved: "Better maintainability with design system" 