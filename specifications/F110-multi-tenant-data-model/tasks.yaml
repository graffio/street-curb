current_task: "task_1_action_types"
status: "pending"

# Reference: See docs/architecture/multi-tenant.md for detailed organization/project patterns, data isolation rules, and role hierarchy

tasks:
  - id: "task_1_action_types"
    description: "Define Action type variants for organizations and users"
    status: "pending"
    phase: "Domain Model"
    dependencies: []
    estimated_hours: 3
    implementation: |
        Define 9 Action tagged types in `modules/curb-map/type-definitions/action.type.js`:

        Organization Actions (4):
        - OrganizationCreated: {organizationId, projectId, name}
        - OrganizationUpdated: {organizationId, name?, status?}
        - OrganizationSuspended: {organizationId}
        - OrganizationDeleted: {organizationId}

        User Actions (5):
        - UserCreated: {userId, email, displayName, organizationId, role}
        - UserUpdated: {userId, email?, displayName?}
        - UserDeleted: {userId, organizationId}
        - UserForgotten: {userId, reason}
        - RoleAssigned: {userId, organizationId, role}

        IMPORTANT - Action Payloads Contain ONLY Domain Fields:
        - NO createdBy/createdAt/updatedAt/updatedBy (giant function adds from actionRequest)
        - NO status in OrganizationCreated (always initialized to "active")
        - All IDs use FieldTypes: newOrganizationId(), newUserId(), newProjectId()

        Implementation:
        - Update Action.variants with all 9 types
        - Implement Action.toFirestore() serialization
        - Implement Action.fromFirestore() deserialization
        - Handle all variants in fromFirestore switch
    validation:
      - "All 9 Action variants defined with proper schemas"
      - "toFirestore/fromFirestore handle all variants correctly"
      - "Action.from() creates valid instances for each variant"
    tests:
      - "modules/curb-map/functions/test/action-types.tap.js"
    notes: |
      DOMAIN MODEL (Simplified for MVP):

      Organization: {id, name, status, defaultProjectId, createdAt, createdBy, updatedAt, updatedBy}
      - status: "active" | "suspended" (initialized to "active")
      - defaultProjectId: points to default project (projectId from OrganizationCreated action)
      - Metadata fields added by giant function, not in Action payload
      - Deferred: subscription (F112), SSO settings (backlog)

      User: {id, email, displayName, organizations: {orgId: role}, lastLogin, failedAttempts, createdAt, createdBy, updatedAt, updatedBy}
      - role: "admin" | "member" | "viewer" (simple enum)
      - lastLogin: timestamp (for F110.5 auth tracking)
      - failedAttempts: number (for F110.5 brute force prevention)
      - Metadata fields added by giant function, not in Action payload
      - Deferred: granular permissions (F110.5+), lastAccess analytics (backlog)

      Project (default): {id, organizationId, name, createdAt, createdBy, updatedAt, updatedBy}
      - Each organization gets a default project with real CUID2 ID
      - Hierarchical: /organizations/{orgId}/projects/{defaultProjectId}
      - Found via: organization.defaultProjectId
      - Project CRUD actions deferred to backlog
      - No migration needed when projects added later

  - id: "task_2_organization_handlers"
    description: "Implement organization event handlers with validation"
    status: "pending"
    phase: "Domain Model"
    dependencies: ["task_1_action_types"]
    estimated_hours: 3
    implementation: |
        Create `modules/curb-map/functions/src/events/organizationHandlers.js`:

        Handlers:
        - handleOrganizationCreated(actionRequest)
          * Generate defaultProjectId = FieldTypes.newProjectId()
          * Write to /organizations/{orgId}:
            {id, name, status: "active", defaultProjectId, createdAt, createdBy, updatedAt, updatedBy}
          * Create default project at /organizations/{orgId}/projects/{defaultProjectId}:
            {id: defaultProjectId, organizationId, name: "Default Project", createdAt, createdBy, updatedAt, updatedBy}
          * Metadata (createdAt/createdBy/updatedAt/updatedBy) from actionRequest.actorId and serverTimestamp
          * Validation: name required (non-empty string)

        - handleOrganizationUpdated(actionRequest)
          * Update /organizations/{orgId}
          * Update name and/or status fields
          * Set updatedAt = serverTimestamp, updatedBy = actionRequest.actorId
          * Validation: status must be "active" | "suspended"

        - handleOrganizationSuspended(actionRequest)
          * Update /organizations/{orgId} with status: "suspended"
          * Set updatedAt/updatedBy
          * Shorthand for OrganizationUpdated with status change

        - handleOrganizationDeleted(actionRequest)
          * Delete /organizations/{orgId} document
          * Note: cascade deletion of projects/data deferred to later

        Validation:
        - Required fields (name)
        - Status enum validation ("active" | "suspended")
        - Basic structure validation
    validation:
      - "Organization handlers create/update documents correctly"
      - "OrganizationCreated creates both organization and default project"
      - "defaultProjectId properly links to created project"
      - "Metadata fields (createdAt/createdBy/updatedAt/updatedBy) set correctly"
      - "Validation rejects invalid data (missing name, invalid status)"
      - "Status field properly managed (active/suspended)"
    tests:
      - "modules/curb-map/functions/test/organization-handlers.tap.js"
    notes: |
      Writes to:
      - Flat collection: /organizations/{orgId}
      - Hierarchical collection: /organizations/{orgId}/projects/{defaultProjectId}

      Metadata Handling:
      - createdAt/createdBy set from actionRequest.actorId and serverTimestamp
      - updatedAt/updatedBy updated on every write
      - NOT sent in Action payload (prevents spoofing)

      OUT OF SCOPE:
      - Subscription management (F112 billing)
      - SSO configuration (backlog)
      - Cascade deletion logic (defer until needed)

  - id: "task_3_user_handlers"
    description: "Implement user event handlers with role management"
    status: "pending"
    phase: "Domain Model"
    dependencies: ["task_1_action_types"]
    estimated_hours: 3
    implementation: |
        Create `modules/curb-map/functions/src/events/userHandlers.js`:

        Handlers:
        - handleUserCreated(actionRequest)
          * Write to /users/{userId}:
            {id, email, displayName, organizations: {orgId: role}, lastLogin: null, failedAttempts: 0, createdAt, createdBy, updatedAt, updatedBy}
          * Metadata from actionRequest.actorId and serverTimestamp
          * Validation: email format, role enum (admin|member|viewer)

        - handleUserUpdated(actionRequest)
          * Update /users/{userId} profile fields (email, displayName)
          * Set updatedAt = serverTimestamp, updatedBy = actionRequest.actorId
          * Validation: email format if provided

        - handleUserDeleted(actionRequest)
          * Remove organizationId from user.organizations map
          * If last org removed, delete user document entirely
          * Set updatedAt/updatedBy if updating (not deleting)

        - handleUserForgotten(actionRequest)
          * Delete /users/{userId} document (GDPR/CCPA compliance)
          * Reason logged in audit trail (completedActions)

        - handleRoleAssigned(actionRequest)
          * Update user.organizations[orgId] = role
          * Set updatedAt/updatedBy
          * Validation: role enum (admin|member|viewer)

        Validation:
        - Email format validation (basic regex)
        - Role enum validation (admin|member|viewer)
        - Required fields (email, displayName, role)
    validation:
      - "User handlers create/update documents correctly"
      - "Metadata fields (createdAt/createdBy/updatedAt/updatedBy) set correctly"
      - "Role assignment updates organizations map"
      - "Validation rejects invalid emails and roles"
      - "UserDeleted properly removes org from map"
      - "UserForgotten deletes user document"
    tests:
      - "modules/curb-map/functions/test/user-handlers.tap.js"
    notes: |
      Writes to flat collection: /users/{userId}

      Role meanings (authorization details in F110.5):
      - admin: full access to organization
      - member: read/write data
      - viewer: read-only access

      Auth tracking fields (lastLogin, failedAttempts):
      - Initialized here (lastLogin=null, failedAttempts=0)
      - Updated by F110.5 auth system

      Metadata Handling:
      - createdAt/createdBy set from actionRequest.actorId and serverTimestamp
      - updatedAt/updatedBy updated on every write
      - NOT sent in Action payload (prevents spoofing)

      OUT OF SCOPE:
      - Granular permissions (F110.5+)
      - lastAccess analytics (backlog)

  - id: "task_4_integration"
    description: "Integrate handlers with F108 and create test utilities"
    status: "pending"
    phase: "Domain Model"
    dependencies: ["task_2_organization_handlers", "task_3_user_handlers"]
    estimated_hours: 3
    implementation: |
        Part A: F108 Integration (2h)

        Update `modules/curb-map/functions/src/handle-action-request-added.js`:
        - Import organizationHandlers and userHandlers
        - Add dispatch logic after idempotency check:
          * Route by action['@@tagName'] to appropriate handler
          * Pass actionRequest to handler
          * Handlers write to collections directly
          * Handlers add metadata (createdAt/createdBy/updatedAt/updatedBy) from actionRequest.actorId
        - Preserve existing error handling and audit trail

        Dispatch mapping:
        - OrganizationCreated/Updated/Suspended/Deleted → organizationHandlers
        - UserCreated/Updated/Deleted/Forgotten/RoleAssigned → userHandlers

        Note: projectId normalization happens in handlers when accessing hierarchical data.
        Default project lookup via: organization.defaultProjectId

        Part B: Test Auth Helpers (1h)

        Create `modules/curb-map/test-utils/auth-helpers.js`:
        - createTestUser(userId, organizationId, role)
          * Create user in Firebase Auth emulator
          * Set custom claims: {organizations: {orgId: role}}
        - mockAuthContext(userId, claims)
          * Inject auth context for handler testing
        - clearTestUsers()
          * Cleanup helper for test isolation

        Note: Minimal implementation for testing only. Full auth in F110.5.
    validation:
      - "F108 giant function dispatches to handlers correctly"
      - "All 9 Action types route to appropriate handlers"
      - "Metadata fields (createdAt/createdBy/updatedAt/updatedBy) set correctly"
      - "Default project created with real CUID2 ID"
      - "organization.defaultProjectId properly links to project"
      - "Auth helpers work with Firebase Auth emulator"
      - "E2E flow: write ActionRequest → dispatch → handler → collection write"
    tests:
      - "modules/curb-map/test/auth-helpers.tap.js"
      - "modules/curb-map/functions/test/domain-integration.firebase.js"
    notes: |
      E2E integration test should verify:
      - All 9 Action types process correctly (OrganizationCreated/Updated/Suspended/Deleted, UserCreated/Updated/Deleted/Forgotten, RoleAssigned)
      - Hierarchical collections work: /organizations/{orgId}/projects/{defaultProjectId}/...
      - Flat collections work: /users/{id}, /organizations/{id}
      - Metadata fields set correctly from actionRequest.actorId
      - Default project has real CUID2 ID (not "default" string)
      - Validation failures handled gracefully
      - Idempotency preserved (from F108)
      - Audit trail preserved (completedActions)

completed: []

deleted_as_overengineered:
  - "Project actions (4): ProjectCreated/Updated/Archived/Deleted - deferred to backlog"
  - "OrganizationReactivated - use OrganizationUpdated with status instead"
  - "Subscription/SSO fields - deferred to F112 and backlog"
  - "Granular permissions - deferred to F110.5+"
  - "CRUD APIs - deferred to backlog (for webhooks/external integrations)"
  - "Data isolation middleware - belongs in F110.5 with auth"
  - "Materialized views - moved to F110.6"
  - "Load testing and monitoring - moved to backlog"

notes: |
    This specification implements the multi-tenant domain model for CurbMap.

    SIMPLIFIED DOMAIN MODEL (9 Actions total):
    - Organization Actions (4): OrganizationCreated, OrganizationUpdated, OrganizationSuspended, OrganizationDeleted
    - User Actions (5): UserCreated, UserUpdated, UserDeleted, UserForgotten, RoleAssigned
    - Projects: Each org gets default project with real CUID2 ID (CRUD deferred to backlog)

    SCOPE: Domain model definition only
    - Action type definitions (tagged types for 9 domain events)
    - Event handlers for organization and user management
    - F108 integration (dispatch from giant function to handlers)
    - Hierarchical structure ready: /organizations/{orgId}/projects/default/...
    - Flat collections: /users/{id}, /organizations/{id}
    - Test auth helpers (minimal for testing only)

    DEFERRED TO F110.5 (Authentication & Authorization):
    - Granular permissions (resource-based access control)
    - SSO configuration
    - Authorization via Firestore security rules

    DEFERRED TO F112 (Billing):
    - Subscription management (tier, amounts, billing dates)

    DEFERRED TO BACKLOG:
    - Project CRUD actions (add when multi-project needed)
    - CRUD APIs (for webhooks/external integrations)
    - Analytics fields (lastAccess per org)
    - Configurable audit retention

    ARCHITECTURE DECISIONS:
    - Hierarchical collections for projects (ready for future, no migration)
    - Default project per org: real CUID2 ID, linked via organization.defaultProjectId
    - Metadata in giant function: createdAt/createdBy/updatedAt/updatedBy from actionRequest.actorId
    - Action payloads: domain fields ONLY (no metadata, prevents spoofing)
    - Simple role enum (admin/member/viewer) for MVP
    - Fields needed for F110.5 included now (status, lastLogin, failedAttempts)
    - All IDs use FieldTypes: newOrganizationId(), newUserId(), newProjectId()

    DEPENDS ON:
    - F108: Event sourcing infrastructure (completed)

    Total: 12 hours (4 tasks × 3 hours each)

    Task ID format: task_{sequence}_{description}
    Status values: pending, in_progress, completed, blocked, cancelled
    Dependencies: List of task IDs that must be completed first
    Validation: Specific criteria that must be met for task completion
