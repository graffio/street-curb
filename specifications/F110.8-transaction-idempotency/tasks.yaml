current_task: null
status: "completed"

tasks:
  - id: "task_1_facade_transactions"
    description: "Add transaction support to firestore-admin-facade.js"
    status: "completed"
    phase: "Infrastructure"
    dependencies: []
    estimated_hours: 3
    implementation: |
        Update `modules/curb-map/src/firestore-facade/firestore-admin-facade.js`:

        - Add optional `tx` parameter (default null) to constructor
        - All methods: if (tx) { tx.METHOD(...) } else { await docRef.METHOD(...) }
        - Add readOrNull(id) method that returns null instead of throwing when document doesn't exist
        - create() with tx: check existence via readOrNull(), then tx.set()
        - Tagged type pattern: if (!Type.is(record)) record = Type.from(record)
        - Apply to: write, read, readOrNull, create, update, delete, readAll
    validation:
      - "Facade accepts optional transaction parameter"
      - "All methods work in both modes"
      - "Tagged type pattern enforced"
    tests:
      - "modules/curb-map/test/firestore-facade-transactions.tap.js"

  - id: "task_2_write_failing_tests"
    description: "Write failing tests for transaction-based HTTP function"
    status: "completed"
    phase: "Testing"
    dependencies: ["task_1_facade_transactions"]
    estimated_hours: 2
    implementation: |
        Update test files to expect new transaction behavior:

        Update test files to expect new transaction behavior:

        Update `modules/curb-map/test/organization-handlers-http.firebase.js`:
        - Add tests expecting HTTP 409 for duplicate requests (not 200 + duplicate: true)
        - Add tests for serverTimestamp() usage instead of client timestamps
        - Add tests for atomic duplicate detection (parallel submissions)
        - Add tests verifying no 'pending' status in completedActions
        - Tests should FAIL until task 3 implementation

        Note: `modules/curb-map/test/minimal-http-function.firebase.js` already has comprehensive tests for the same behavior:
        - HTTP 409 for duplicates (lines 108-138)
        - Server timestamps (lines 56-78) 
        - No pending status (lines 80-106)
        - Atomic duplicate detection (lines 140-171)
        - These tests are already written correctly and will pass when task 3 is implemented

        Test helpers already exist:
        - submitAndExpectDuplicate(params) expects 409 + status: 'duplicate'
        - submitAndExpectSuccess(params) expects 200 responses only
    validation:
      - "Tests exist and fail with current implementation"
      - "Tests cover all transaction scenarios"
      - "Breaking change tests included"
      - "Test helpers distinguish between 200 and 409 responses"
    tests:
      - "modules/curb-map/test/organization-handlers-http.firebase.js"
      - "modules/curb-map/test/minimal-http-function.firebase.js"

  - id: "task_3_implement_transactions"
    description: "Implement transaction-based HTTP function with context updates"
    status: "completed"
    phase: "Implementation"
    dependencies: ["task_2_write_failing_tests"]
    estimated_hours: 3
    implementation: |
        Update submit-action-request.js AND createFirestoreContext:

        Update `modules/curb-map/functions/src/firestore-context.js`:
        - Add optional `tx` parameter (default null)
        - Pass tx to all FirestoreAdminFacade calls:
          * completedActions: FirestoreAdminFacade(ActionRequest, namespace, db, 'completedActions', tx)
          * organizations: FirestoreAdminFacade(Organization, namespace, db, null, tx)
          * users, projects: same pattern

        Update `modules/curb-map/functions/src/submit-action-request.js`:
        CRITICAL: Transaction returns result object; HTTP response AFTER transaction completes

        Structure:
        ```javascript
        // actionRequest.id is document ID (idempotencyKey converted: idm_xxx â†’ acr_xxx)
        const result = await db.runTransaction(async (tx) => {
          const txContext = createFirestoreContext(namespace, orgId, projectId, tx)

          // Duplicate check
          const existing = await txContext.completedActions.readOrNull(actionRequest.id)
          if (existing) {
            // Duplicate: return processedAt from existing record
            return { duplicate: true, processedAt: existing.processedAt.toISOString() }
          }

          // Handler
          await handler(logger, txContext, actionRequest)

          // Single write with server timestamps
          const serverTimestamp = FirestoreAdminFacade.serverTimestamp
          await txContext.completedActions.create({
            ...actionRequest,
            status: 'completed',
            createdAt: serverTimestamp(),
            processedAt: serverTimestamp()
          })

          // Success: return nothing (processedAt read after commit)
          return { duplicate: false }
        })

        // HTTP response AFTER transaction completes
        if (result.duplicate) {
          return res.status(409).json({ status: 'duplicate', message: 'Already processed', processedAt: result.processedAt })
        }

        // Create new non-transactional context to read (txContext is out of scope)
        const fsContext = createFirestoreContext(namespace, orgId, projectId)
        const completed = await fsContext.completedActions.read(actionRequest.id)
        return res.status(200).json({ status: 'completed', processedAt: completed.processedAt.toISOString() })
        ```

        Remove ALL write-first code:
        - Remove initial create with status: 'pending'
        - Remove try/catch for error.code === 6
        - Remove subsequent update() call

        BREAKING CHANGES:
        - Duplicate detection now returns HTTP 409 (was 200 + duplicate: true)
        - Response body for duplicates: { status: 'duplicate', message: '...', processedAt: '...' }
        - Clients expecting 200 + duplicate: true must update to handle 409
    validation:
      - "All tests from task 2 now pass"
      - "Single write as 'completed'"
      - "No 'pending' state"
      - "Duplicate detection atomic"
      - "HTTP response happens AFTER transaction completes"
      - "Breaking change documented"
    tests:
      - "modules/curb-map/test/organization-handlers-http.firebase.js"
      - "modules/curb-map/test/minimal-http-function.firebase.js"

  - id: "task_5_remove_obsolete_status"
    description: "Remove obsolete status field from ActionRequest type and related systems"
    status: "completed"
    phase: "Cleanup"
    dependencies: ["task_3_implement_transactions"]
    estimated_hours: 2
    implementation: |
        Remove status field from ActionRequest architecture:

        Update `modules/curb-map/type-definitions/action-request.type.js`:
        - Remove status field from ActionRequest type definition
        - Update Hindley-Milner signature

        Update `modules/curb-map/src/types/action-request.js`:
        - Remove status parameter from constructor
        - Remove status validation in constructor

        Update `modules/curb-map/firestore.rules`:
        - Remove status validation from hasValidActionRequestFields()
        - Remove pending state business logic
        - Remove isValidStatus() function

        Update `modules/curb-map/firestore.indexes.json`:
        - Remove status-based indexes (actionRequests collection indexes are obsolete)
        - Keep only completedActions indexes

        Update documentation:
        - Remove status field references from data-model.md
        - Update architecture docs to reflect status-less design
    validation:
      - "ActionRequest constructor no longer requires status"
      - "Firestore rules no longer validate status"
      - "No status-based indexes remain"
      - "Documentation updated"
      - "All tests pass without status field"
    tests:
      - "modules/curb-map/test/organization-handlers-http.firebase.js"
      - "modules/curb-map/test/minimal-http-function.firebase.js"

  - id: "task_4_update_docs"
    description: "Update event-sourcing.md documentation"
    status: "completed"
    phase: "Documentation"
    dependencies: ["task_5_remove_obsolete_status"]
    estimated_hours: 1
    implementation: |
        Update `docs/architecture/event-sourcing.md`:

        - Fix transaction example: use readOrNull() instead of read()
        - Fix timestamps: use FirestoreAdminFacade.serverTimestamp() instead of new Date()
        - Fix duplicate response: HTTP 409 instead of 200 with duplicate flag
        - Fix authorization claim: Admin SDK bypasses security rules (auth in function, F110.5)
        - Add readOrNull() method to facade code example
        - Emphasize SOC2 requirement for server-authoritative timestamps
        - Remove status field references (now obsolete)
    validation:
      - "All code examples use serverTimestamp()"
      - "readOrNull() method documented"
      - "HTTP 409 for duplicates"
      - "Admin SDK security rules claim corrected"
      - "No status field references remain"
    tests:
      - "Manual review"

completed:
  - "task_1_facade_transactions"
  - "task_2_write_failing_tests"
  - "task_3_implement_transactions"
  - "task_4_update_docs"
  - "task_5_remove_obsolete_status"

notes: |
    Migrates from write-first to transaction-based idempotency for SOC2 compliance.

    KEY DECISIONS:
    - Submit-action-request.js ALWAYS uses transactions (not optional)
    - Facade accepts optional tx for flexibility elsewhere (tests, migrations)
    - Use readOrNull() for duplicate check (returns null, not throw)
    - Use serverTimestamp() for SOC2 audit trail integrity
    - HTTP 409 for duplicates (semantically correct)
    - Transaction returns result object; HTTP response happens AFTER transaction completes

    BREAKING CHANGES:
    - Duplicate requests now return HTTP 409 (was 200 + duplicate: true)
    - Response body changed: { status: 'duplicate', message: '...', processedAt: '...' }
    - Clients must update to handle 409 as idempotent success
    - Test helpers must expect 409, not 200 + duplicate flag

    SCOPE: Transaction support in facades + HTTP function + tests + docs
    OUT OF SCOPE: Retry logic (Firestore handles), performance testing
    DEPENDENCIES: F110.7 (HTTP Action Submission)

    Total: 8 hours (5 tasks)

    See docs/architecture/event-sourcing.md for architectural rationale.
