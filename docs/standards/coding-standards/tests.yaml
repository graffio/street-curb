compliance_tests:
  - id: functional-programming-compliance
    description: Code should use functional programming patterns
    compliant_example: |
      const processUsers = users => {
          const activeUsers = users.filter(user => user.isActive)
          return activeUsers.map(user => ({ ...user, processed: true }))
      }
    non_compliant_example: |
      class UserProcessor {
          constructor() {
              this.users = []
          }
          processUsers() {
              for (let i = 0; i < this.users.length; i++) {
                  this.users[i].processed = true
              }
          }
      }
      
  - id: typescript-prohibition
    description: No TypeScript syntax or file extensions allowed
    compliant_example: |
      // myComponent.jsx
      const processData = data => {
          if (!data) return null
          return data.map(item => ({ ...item, processed: true }))
      }
    non_compliant_example: |
      // myComponent.tsx
      interface User {
          id: number
          name: string
      }
      const processData = (data: User[]): ProcessedUser[] => {
          return data.map(item => ({ ...item, processed: true }))
      }
      
  - id: function-placement-compliance
    description: Functions should be at top of nearest containing block
    compliant_example: |
      const processData = data => {
          const validateUser = user => {
              if (!user.email) return false
              return user.isActive !== false
          }
          
          const enrichUser = user => {
              const timestamp = new Date().toISOString()
              return { ...user, processedAt: timestamp }
          }
          
          const validUsers = data.filter(validateUser)
          return validUsers.map(enrichUser)
      }
    non_compliant_example: |
      const processData = data => {
          const validUsers = data.filter(user => user.isActive)
          
          const enrichUser = user => {
              const timestamp = new Date().toISOString()
              return { ...user, processedAt: timestamp }
          }
          
          return validUsers.map(enrichUser)
      }
      
  - id: single-indentation-level
    description: Functions should have only one level of indentation
    compliant_example: |
      const processData = data => {
          const validateAndProcess = user => {
              if (!user.email) return null
              const processed = { ...user, validated: true }
              return processed
          }
          
          if (!data) return []
          if (data.length === 0) return []
          
          return data.map(validateAndProcess).filter(Boolean)
      }
    non_compliant_example: |
      const processData = data => {
          if (data) {
              if (data.length > 0) {
                  return data.map(user => {
                      if (user.email) {
                          return { ...user, processed: true }
                      }
                      return null
                  })
              }
          }
          return []
      }
      
  - id: sig-documentation-compliance
    description: Functions should have @sig documentation with Hindley-Milner notation
    compliant_example: |
      /*
       * Process user data with validation and enrichment
       * @sig processUsers :: ([User], Config) -> [ProcessedUser]
       *     User = { id: String, name: String, email: String, isActive: Boolean }
       *     Config = { includeTimestamp: Boolean }
       *     ProcessedUser = { id: String, name: String, email: String, processedAt: String? }
       */
      const processUsers = (users, config) => {
          // implementation
      }
    non_compliant_example: |
      // Process user data
      const processUsers = (users, config) => {
          // implementation without @sig
      }
      
  - id: testing-format-compliance
    description: Tests should use Given/When/Then with proper English documentation style
    compliant_example: |
      t.test('Given a user clicks "Add First Segment"', t => {
          t.test('When there are no segments yet', t => {
              const result = processAddSegment([], 240)
              t.equal(result.segments.length, 1, 'Then one segment of 20 feet is added')
              t.equal(result.totalLength, 240, 'Then the total length matches the blockface')
              t.end()
          })
          
          t.test('When there are existing segments', t => {
              const existingSegments = [{ length: 100 }, { length: 80 }]
              const result = processAddSegment(existingSegments, 240)
              t.equal(result.segments.length, 3, 'Then a new segment is added to the existing ones')
              t.end()
          })
          t.end()
      })
    non_compliant_example: |
      // Avoid programming notation and missing articles
      t.same(processAddSegment([], 240), expected, "processAddSegment returns segment")
      t.test('should maintain blockfaceLength = sum(segments) + unknownRemaining', ...)
      t.test('has start + 2 segment ends + final tick', ...)
      t.test('When calculating dropdown position', ...)  // missing "the"
      
  - id: unnecessary-braces-removal
    description: Remove unnecessary braces and parentheses
    compliant_example: |
      if (condition) doSomething()
      
      const transform = item => item.processed ? item : { ...item, processed: true }
      
      if (user.isActive) return processUser(user)
      return null
    non_compliant_example: |
      if (condition) {
          doSomething()
      }
      
      const transform = (item) => {
          return item.processed ? item : { ...item, processed: true }
      }
      
      if (user.isActive) {
          return processUser(user)
      } else {
          return null
      }